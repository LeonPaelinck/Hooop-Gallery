<div class="form-group">
    <label>Pictures: </label>
    <InputFile OnChange="@OnInputFileChange" multiple accept="image/*" />
    <div>
        @foreach (var foto in Fotos)
        {
        <div class="form-control-file">
            @if (foto.Uploaded)
            {
                <img src="@foto.Pad" alt="@foto.Naam" width="250" height="250" style="padding-right:20px;" />
            }
            else
            {
                <img alt="@foto.Naam" width="250" height="250" style="padding-right:20px;" />
            }
            @if (!foto.PendingDelete)
            {
                <button type="button" class="btn btn-secondary" @onclick="() => RemoveImage(foto)">
                    <i class="far fa-trash-alt"></i>
                </button>

            }
            else
            {
                <button type="button" class="btn btn-secondary" @onclick="() => CancelRemove(foto)">
                    <i class="fas fa-trash-restore"></i>
                </button>
                <button type="button" class="btn btn-danger" @onclick="() => RemoveImageConfirm(foto)">
                    <i class="far fa-trash-alt"></i>
                </button>
            }


        </div>
        }
    </div>
</div>


@code {
    [Parameter] public List<Foto_DTO> Fotos { get; set; }
    [Parameter] public IList<IBrowserFile> ImageFiles { get; set; }
    private  Dictionary<Foto_DTO, IBrowserFile> logbook = new Dictionary<Foto_DTO, IBrowserFile>();

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {

        foreach (var file in e.GetMultipleFiles())
        {
            var foto = new Foto_DTO() { Naam = file.Name };
            ImageFiles.Add(file); //volledig bestand hier tijdelijk opslaan tot het op blob komt
            Fotos.Add(foto); //geven we mee aan databank
            logbook.Add(foto, file); //hier houden we bij welke imagefile bij welke fotoDTO hoort
        }
    }

    private void RemoveImage(Foto_DTO foto)
    {
        foto.PendingDelete = true;
    }


    private void RemoveImageConfirm(Foto_DTO foto)
    {
        Fotos.Remove(foto);
        IBrowserFile imgFile;
        if (logbook.TryGetValue(foto, out imgFile))
        {
            imgFile = logbook[foto]; //uitzoeken welke ImgFile bij de huidige foto hoort
            ImageFiles.Remove(imgFile);
        }


    }


    private void CancelRemove(Foto_DTO foto)
    {
        foto.PendingDelete = false;
    }
}
